// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/ronnachate/foodstore/food-api/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ProductRepository is an autogenerated mock type for the ProductRepository type
type ProductRepository struct {
	mock.Mock
}

// GetProducts provides a mock function with given fields: c, productIDs
func (_m *ProductRepository) GetProducts(c context.Context, productIDs []uuid.UUID) ([]domain.Product, error) {
	ret := _m.Called(c, productIDs)

	var r0 []domain.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) ([]domain.Product, error)); ok {
		return rf(c, productIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) []domain.Product); ok {
		r0 = rf(c, productIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uuid.UUID) error); ok {
		r1 = rf(c, productIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProductRepository creates a new instance of ProductRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductRepository {
	mock := &ProductRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
